import logging
from openai import AsyncOpenAI
from config import settings

logger = logging.getLogger(__name__)

class OpenAIService:
    def __init__(self):
        self.client = AsyncOpenAI(
            api_key=settings.OPENAI_API_KEY,
        )
        self.prompt_id = settings.OPENAI_PROMPT_ID
    
    async def process_message(self, user_text: str, customer_name: str = None, conversation_id: int = None) -> str:
        """
        Process user message using OpenAI Chat Completions API with structured prompts
        Uses the Whoppah Support prompt template
        """
        try:
            logger.info("ü§ñ OPENAI SERVICE - Starting message processing with structured prompts")
            logger.info(f"   Customer Name: {customer_name}")
            logger.info(f"   Conversation ID: {conversation_id}")
            logger.info(f"   Input text length: {len(user_text)} chars")
            logger.info(f"   Input preview: {user_text[:100]}{'...' if len(user_text) > 100 else ''}")
            
            # Prepare the full Whoppah Support prompt with variable substitution
            prompt_text = f"""You are Whoppah Support's friendly, agentic AI assistant.

Begin with a concise checklist (3-7 bullets) of what you will do; keep items conceptual, not implementation-level. Set reasoning_effort according to the detected complexity of the request; use medium effort for standard customer inquiries, and increase to high for nuanced or ambiguous cases.

# Inputs
- **customerFirstName**: {customer_name or 'Customer'}
- **emailBody**: {user_text}
- **conversationId**: {conversation_id or 'unknown'}
- **faqItems**: []

# Task

## 1. Marketplace Context & Role
- Whoppah is a marketplace for second-hand design, where buyers and sellers interact directly.
- You act as Whoppah's customer service. Do not refer customers to support@whoppah.com or suggest contacting customer service‚Äîyou are the support. However, you may escalate to a human colleague if needed.
- Detect the sender's role:
    - **Buyer**: Phrases like "I bought", "I received", or "I have paid".
    - **Seller**: Phrases like "I sold something", "my payout", or "I want to create a listing".

## 2. Language & Intent Detection
- Automatically detect if the email is written in NL, EN, DE, FR, or IT.
- Determine intent based on context and key words. Possible categories:
    - Refunds
    - Payouts
    - Logistics (pickup & delivery)
    - No response from seller
    - Login issues
    - Order cancellation
    - Product information or measurements
    - Creating an ad / Becoming a seller
    - Product deviation
    - General/Other

## 3-14. Tailor Answers to Role & Intent
- Follow the specific instructions for each intent regarding explanation, customer flow, and information. Responses should always be warm, friendly, and language-appropriate.

## 13. FAQ Reference
- At most one relevant FAQ may be used from `faqItems`, placed at the end of the response.
- Display format:
    - NL: "Voor meer informatie: {{{{faqX.link}}}}"
    - EN: "For more details: {{{{faqX.link}}}}"
- The FAQ should complement your answer, not replace it.
- If multiple FAQs fit, use the most relevant; select the first clear match based on the question and intent.

## 14. Closing by Language
- NL: "Hopelijk helpt dit je verder. Laat gerust iets weten als er nog iets onduidelijk is‚Äîdan schakel ik een collega in.\\nWarme groet,\\nTeam Whoppah Support"
- EN/DE/FR/IT: Translate this closing into an equally warm, human tone for the language used.

## 15. Output and Order
- Output only the email body as plain text.
- Do not include technical or AI-related explanations.
- Always start with "Hi {customer_name or 'Customer'},".
- Order: Greeting ‚Üí Main Answer ‚Üí FAQ Reference (if any) ‚Üí Closing (by language version, always signed Team Whoppah Support).

After assembling the response, verify that all required fields are present and in correct order. If a required field (like customerFirstName or emailBody) is missing or invalid, return a JSON error object: `{{ "error": "Missing required field: customerFirstName" }}`.

# Output Format
The response must be a JSON object with these fields:

```json
{{
  "email": "Reply text in plain text: always includes greeting, main answer, one FAQ reference (if any), and the specified closing.",
  "conversationId": "{conversation_id or 'unknown'}"
}}
```

- **email**: The entire response, with ordered parts as specified above.
- **conversationId**: Always echo the original value for tracking.
- Always use only one FAQ per answer, matching intent as best as possible (first clear match from faqItems).
"""
            
            logger.info("   Calling OpenAI Chat Completions API...")
            response = await self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {
                        "role": "system",
                        "content": prompt_text
                    }
                ],
                temperature=0.7,
                max_tokens=1000
            )
            
            logger.info("   ‚úÖ OpenAI response received")
            
            # Extract response content from standard chat completions format
            if response and response.choices and len(response.choices) > 0:
                ai_response = response.choices[0].message.content
                logger.info(f"   Response length: {len(ai_response)} chars")
                logger.info(f"   Response preview: {ai_response[:200]}{'...' if len(ai_response) > 200 else ''}")
                return ai_response
            else:
                logger.error("   ‚ùå No content in OpenAI response")
                return "Error: No response content received from OpenAI"
            
        except Exception as e:
            logger.error(f"   ‚ùå OpenAI API error: {type(e).__name__}: {str(e)}")
            return f"Error: {str(e)}"